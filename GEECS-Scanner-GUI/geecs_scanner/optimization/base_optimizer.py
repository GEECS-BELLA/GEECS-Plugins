# optimization/base_optimizer.py

from xopt import Xopt, VOCS
from typing import Callable, Optional, List
import yaml


class BaseOptimizer:
    def __init__(
        self,
        vocs: VOCS,
        evaluate_function: Callable[[dict], dict],
        generator_name: str = "random",
        xopt_config_overrides: Optional[dict] = None,
    ):
        """
        Wrapper around Xopt to expose a generate/evaluate interface without coupling control motion.

        Args:
            vocs: A VOCS object defining the search space.
            evaluate_function: A callable accepting a dict of inputs, returning a dict of results.
            generator_name: Name of the Xopt generator (e.g., 'random', 'cnsga').
            xopt_config_overrides: Optional extra config dict for Xopt.
        """
        self.vocs = vocs
        self.evaluate_function = evaluate_function
        self.generator_name = generator_name
        self.xopt: Optional[Xopt] = None
        self._setup_xopt(xopt_config_overrides or {})

    def _setup_xopt(self, overrides: dict):
        config = {
            "evaluator": {
                "function": self.evaluate_function
            },
            "generator": {
                "name": self.generator_name
            },
            "vocs": self.vocs.dict()
        }
        config.update(overrides)
        self.xopt = Xopt.from_yaml(yaml.dump(config))

    def initialize(self, num_initial: int = 1):
        """
        Run initial random evaluations to seed the optimization.
        """
        self.xopt.random_evaluate(num_initial)

    def generate(self, n: int = 1) -> List[dict]:
        """
        Generate candidate points for evaluation.

        Returns:
            List of input dictionaries, each representing a set of control values.
        """
        return self.xopt.generator.generate(n)

    def evaluate(self, inputs: List[dict]):
        """
        Evaluate input points using the Xopt evaluator, and store the results.

        Args:
            inputs: List of input dictionaries generated by `generate()`.
        """
        self.xopt.evaluate_data(inputs)

    def get_results(self):
        """
        Return the full results dataframe from Xopt.
        """
        return self.xopt.data

    def get_best(self):
        """
        Return the best observed point according to the defined objective(s).
        """
        return self.xopt.data.sort_values(by=list(self.vocs.objectives.keys()))[:1]
