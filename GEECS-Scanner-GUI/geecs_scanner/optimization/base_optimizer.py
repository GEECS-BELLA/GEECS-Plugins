# optimization/base_optimizer.py
from __future__ import annotations

from xopt import Xopt, VOCS
from typing import Callable, Optional, List, Any, Dict
import yaml

from geecs_scanner.optimization.base_evaluator import BaseEvaluator
from geecs_scanner.data_acquisition.scan_data_manager import ScanDataManager
from geecs_scanner.data_acquisition.data_logger import DataLogger


class BaseOptimizer:
    def __init__(
            self,
            vocs: VOCS,
            evaluate_function: Callable[[Dict[str, Any]], Dict[str, Any]],
            generator_name: str,
            xopt_config_overrides: Optional[dict] = None,
            evaluator: Optional[BaseEvaluator] = None,
            device_requirements: Optional[Dict[str, Any]] = None,
            scan_data_manager: Optional[ScanDataManager] = None,
            data_logger: Optional[DataLogger] = None

    ):
        """
        Wrapper around Xopt to expose a generate/evaluate interface without coupling to control system logic.

        Args:
            vocs: A VOCS object defining the variables, objectives, and constraints.
            evaluate_function: A callable that takes a dictionary of variable values and returns a dictionary of results.
            generator_name: The name of the Xopt generator to use (e.g., 'random', 'cnsga').
            xopt_config_overrides: Optional dictionary to override fields in the default Xopt configuration.
            evaluator: Optional reference to the evaluator object providing the evaluate_function.
            device_requirements: Optional dictionary defining required devices and variables for the optimization.
            scan_data_manager: Optional instance of ScanDataManager that can be use to access saved non scalar data
            data_logger: Optinal instance of DataLogger to pass additional information about logged data
        """
        self.vocs = vocs
        self.evaluate_function = evaluate_function
        self.generator_name = generator_name
        self.evaluator = evaluator
        self.device_requirements = device_requirements or {}
        self.xopt: Optional[Xopt] = None
        self.scan_data_manager = scan_data_manager
        self.data_logger = data_logger

        self._setup_xopt(xopt_config_overrides or {})

    def _setup_xopt(self, overrides: dict[str, Any]):
        config = {
            "generator": {"name": self.generator_name},
            "vocs": self.vocs.model_dump()
        }
        config.update(overrides)

        self.xopt = Xopt(
            evaluator={"function": self.evaluate_function},
            generator=config["generator"],
            vocs=self.vocs
        )

    def initialize(self, num_initial: int = 1):
        """
        Run initial random evaluations to seed the optimization.
        """
        self.xopt.random_evaluate(num_initial)

    def generate(self, n: int = 1) -> List[dict]:
        """
        Generate candidate points for evaluation.

        Returns:
            List of input dictionaries, each representing a set of control values.
        """
        return self.xopt.generator.generate(n)

    def evaluate(self, inputs: List[dict]):
        """
        Evaluate input points using the Xopt evaluator, and store the results.

        Args:
            inputs: List of input dictionaries generated by `generate()`.
        """
        self.xopt.evaluate_data(inputs)

    def get_results(self):
        """
        Return the full results dataframe from Xopt.
        """
        return self.xopt.data

    def get_best(self):
        """
        Return the best observed point according to the defined objective(s).
        """
        return self.xopt.data.sort_values(by=list(self.vocs.objectives.keys()))[:1]

    @classmethod
    def from_config_file(cls, config_path: str,
                         scan_data_manager: Optional["ScanDataManager"] = None,
                         data_logger: Optional["DataLogger"] = None) -> "BaseOptimizer":
        """
        Load optimizer and evaluator from a YAML config file.

        Args:
            config_path (str): Path to the YAML config.
            scan_data_manager (ScanDataManager): the instance of ScanDataManager that can be used to access
                                                data as it is acquired
            data_logger (DataLogger): the instance of DataLogger that can be used to directly access things like Bin#

        Returns:
            BaseOptimizer: Initialized optimizer instance.
        """
        import importlib
        import yaml
        from xopt import VOCS

        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)

        vocs = VOCS(**config['vocs'])

        evaluator_cfg = config['evaluator']
        evaluator_module = evaluator_cfg['module']
        evaluator_class_name = evaluator_cfg['class']
        evaluator_init_kwargs = evaluator_cfg.get('kwargs', {})
        device_requirements = config.get('device_requirements', {})
        evaluator_init_kwargs['device_requirements'] = device_requirements
        if scan_data_manager:
            evaluator_init_kwargs['scan_data_manager'] = scan_data_manager
        if data_logger:
            evaluator_init_kwargs['data_logger'] = data_logger

        module = importlib.import_module(evaluator_module)
        evaluator_class = getattr(module, evaluator_class_name)
        evaluator = evaluator_class(**evaluator_init_kwargs)

        generator_name = config['generator']['name']
        xopt_config_overrides = config.get('xopt_config_overrides', {})


        return cls(
            vocs=vocs,
            evaluate_function = evaluator.get_value,
            generator_name = generator_name,
            xopt_config_overrides = xopt_config_overrides,
            evaluator = evaluator,
            device_requirements = device_requirements,
            scan_data_manager = scan_data_manager,
            data_logger = data_logger
        )